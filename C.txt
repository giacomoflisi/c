QUESTIONS AND ANSWERS for the question card thinghy

Q:
fgets()
A:
char *fgets(char *str, int count, FILE *stream);
legge un numero di caratteri pari a count-1 da stream e li scrive in str. ritorna una copia del puntatore str.


Q:
fputs()
A:
int fputs(const char *str, FILE *stream);
Scrive una stringa su file, ritorna int>0 se ha successo altrimenti EOF
Il terminatore della stringa non viene scritto.


Q:
fprintf()
A:
int fprintf(FILE *stream, const char *format, ...);
ritorna il  numero di caratteri scritti correttamente su stream


Q:
fread() FILE BINARI
A:
size_t fread(void *buffer, size_t size, size_t count, FILE *stream);
ritorna il numero di caratteri letti correttamente da stream
size è la dimensione di un singolo elemento di buffer
count è il numero di elementi da leggere


Q:
fwrite()  FILE BINARI
A:
size_t fwrite(const void *buffer, size_t size, size_t count, FILE *stream);
ritorna il numero di caratteri scritti correttamente su stream
size è la dim di un singolo elemento di buffer
count è il numero di caratteri da scrivere


Q:
espressioni tra singolo apice '<exp>' sono di tipo?
A:
int


Q:
operatore logico &&
A:
restituisce 1 se entrambe le espressioni sono != 0


Q:
operatore logico ||
A:
restituisce 1 se almeno una delle espressioni è != 0


Q:
init
A:
inizializza le variabili di controllo del ciclo

Q:
check
A:
controllo della condizione di ripetizione del ciclo


Q:
body
A:
operazioni all'interno del ciclo


Q:
update
A:
aggiorna le variabili di controllo


Q:
malloc()
A:
void *malloc(size_t size);
ritorna un puntatore al primo byte allocato, deve essere assegnato ad un puntatore esistente
size è il numero di byte che si vogliono allocare


Q:
realloc()
A:
void *realloc(void *ptr, size_t newsize);
ridimensiona la memoria allocata precedentemente su heap
ptr è il puntatore alla nuova zona ridimensionata


Q:
variabili file scope
A:
tempo di vita della variabile è pari a quello del programma
- variabile statica
- inizializzata a 0 se non specificata


Q:
variabile block scope
A:
tempo di esistenza pari a quello del blocco in cui sono inizializzate
- variabile automatica
- inizializzata ogni volta che si entra nel blocco
